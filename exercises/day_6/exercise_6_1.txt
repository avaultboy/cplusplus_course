День 6 Задание 1 Классы

Написать программу реализующую работу с упрощенным григорианским календарем (датами).
Использовать следующие правила для календаря:
•	Минимальный год — 1-ый год н.э., максимальный год 9999 н.э.
•	Момент времени представляется годом, месяцем, числом месяца, часом, минутами, секундами
•	Каждый год, номер которого кратен 4 является високосным
•	Каждый год, номер которого кратен 100 не является високосным
•	Каждый год, номер которого кратен 400 является високосным
•	Часовой пояс не учитывается (считается равным UTC)
•	Не учитывать правило, согласно которому следующим днем после 4 октября 1582 года идет 15 октября 1582 года
•	Не требуется совпадение юлианского и данного календаря в датах до 4 октября 1582 года
    (проблема високосных годов кратных 100 но не кратных 400)


Класс даты должен поддерживать корректные операции приращения минут, секунд, часов,
 дней, месяцев и лет с учетом правил календаря.

Месяцы реализовать перечислением Month {Jan=1, …, Dec = 12}.

Конструктор по умолчанию должен создавать дату соответствующую текущему времени UTC
 (для получения времени можно использовать функции из ctime)

Класс должен реализовывать конструктор копии.

Класс должен обеспечить полный набор методов селекторов для получения текущего года,
 месяца, дня месяца (числа), часа, минут, секунд.

Реализовать полный конструктор (unsigned аргументы — год, месяц, число, час, минуты, секунды).

В случае если значения в конструктор переданы некорректно, осуществлять автоматическую нормализацию даты
 (значение большее допустимого в определенном поле приводит к увеличению старших полей, таким образом
 вызов конструктора от аргументов Date(2010, Feb, 30, 22, 59, 72) приведет к созданию объекта
 соответствующего Date(2010, Mar, 2, 23, 00, 13))

Реализовать дополнительно конструкторы:
•	Date (unsigned int year, Month m, unigned int day) — создает объект с временем 0 ч 0 м 0 сек
•	Date (unsigned int hrs, unsigned int mnts, unsigned int secs)  - создает объект с указанным
    временем и текущей датой

Операции addYears, addMonths, addDays, addHours, addMinutes, addSeconds должны возвращать новый
 объект «по значению», оставляя исходный объект неизменным.
Класс должен реализовывать оператор присваивания (единственный метод-модификатор в классе).

Таким образом для изменения исходного объекта нужно пользоваться конструкцией вида:
Date theDate = theDate.addMonths(1);

Аргументы методов addXXX могут быть отрицательными, но при этом
дата не может быть меньше 0:00:00 1 Jan 1 или больше 9999-12-31 23:59:59

Реализовать метод std::string toString() const возвращающий строковое представление даты в формате:
YYYY-MMM-DD  hh::mm::ss

Перегрузить операторы +, -, ++, --, +=, -=, >, <, ==, =.
При добавлении либо вычитании изменять значение дня:
Date d = Date(2007,Sep,19);  // 19 сентября 2007 время 00:00:00
d++;                         // 20 сентября 2007 время 00:00:00
d -= 10;                     // 10 сентября 2007 время 00:00:00

Дополнительно реализовать класс DateInterval, реализующий абстракцию временного интервала между
датами в полных годах, месяцах, днях, часах, минутах, секундах (значения могут быть отрицательными).
DateInterval обеспечить полным набором методов — селекторов, конструктором копии, оператором присваивания.

Класс Date дополнить методом DateInterval getInterval(const Date& another) const возвращающий интервал
между датами и методом Date addInterval (const DateInterval&) const возвращающий новую дату относительно исходной.

Реализовать метод std::string formatDate (std::string format) принимающий аргументом строку формата
для представления даты в виде строки. Значимыми символами в строке формата являются:
•	YYYY
•	MM (месяц в числовом формате)
•	MMM (месяц в формате Jan, Feb... Dec)
•	DD
•	hh
•	mm
•	ss
Остальные символы должны быть включены в итоговую строку без изменения.
В случае если строка формата некорректна, возвращать строку «Invalid date format»
